{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/adalaber/Escritorio/Evaluacion Intermedia 3/version 2/Evaluacion intermedia version 3. router/src/components/App.js\";\nimport React from 'react';\nimport '../stylesheets/App.scss';\nimport getDataFromApi from '../services/Fetch';\nimport CharacterList from './CharacterList';\nimport Filters from './Filter';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterDetail from './CharacterDetail';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      data: []\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.filter = this.filter.bind(this);\n    this.renderCharacterDetail = this.renderCharacterDetail.bind(this);\n  }\n\n  componentDidMount() {\n    getDataFromApi().then(data => {\n      console.log(data.results);\n      this.setState({\n        data: data.results\n      }, () => this.filter());\n    });\n  } //lifttin, evento de filtrado\n\n\n  handleInput(value) {\n    this.setState({\n      inputValue: value\n    }, () => this.filter());\n  }\n\n  filter() {\n    const filterMortyCard = this.state.data.filter(cardFiltred => cardFiltred.name.toLowerCase().includes(this.state.inputValue.toLowerCase()));\n    this.setState({\n      data: filterMortyCard\n    });\n  } // pitamos la tarjeta de detalles, para ello en la rruta que queremos que aparezca declaramos la fucion que pinta los datos, despues con un find, decimos que compare la ruta que hemos puesto (nombre., nickname) con los datos dentro del array inciañ (name)\n\n\n  renderCharacterDetail(props) {\n    const dataObj = this.state.data.find(cardDetail => cardDetail.name === props.match.params.nickname);\n    return /*#__PURE__*/_jsxDEV(CharacterDetail, {\n      data: dataObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    // // Pasamos los datos del archivo json a través del estado del componente y luego por props a su componente hijo\n    const MortyData = this.state.data;\n    const inputValue = this.state.imputValue;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: [/*#__PURE__*/_jsxDEV(CharacterList, {\n            dataMortylist: MortyData // para filtrar tengo que pasarte el estado, donde se guardara el array completo y el filtrado en funcion de si tengo algo en el value o no\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Filters, {\n            inputValue: inputValue,\n            handleInput: this.handleInput //props para que filer avise a app del evento\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:nickname\",\n          render: this.renderCharacterDetail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adalaber/Escritorio/Evaluacion Intermedia 3/version 2/Evaluacion intermedia version 3. router/src/components/App.js"],"names":["React","getDataFromApi","CharacterList","Filters","Route","Switch","CharacterDetail","App","Component","constructor","props","state","inputValue","data","handleInput","bind","filter","renderCharacterDetail","componentDidMount","then","console","log","results","setState","value","filterMortyCard","cardFiltred","name","toLowerCase","includes","dataObj","find","cardDetail","match","params","nickname","render","MortyData","imputValue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../stylesheets/App.scss';\nimport getDataFromApi from '../services/Fetch';\nimport CharacterList from './CharacterList';\nimport Filters from './Filter';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterDetail from './CharacterDetail';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      data: [],\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.filter = this.filter.bind(this);\n    this.renderCharacterDetail= this.renderCharacterDetail.bind (this);\n  }\n\n  componentDidMount() {\n    getDataFromApi().then((data) => {\n      console.log(data.results);\n      this.setState(\n        {\n          data: data.results,\n        },\n        () => this.filter()\n      );\n    });\n  }\n\n  //lifttin, evento de filtrado\n  handleInput(value) {\n    this.setState(\n      {\n        inputValue: value,\n      },\n      () => this.filter()\n    );\n  }\n\n  filter() {\n    const filterMortyCard = this.state.data.filter((cardFiltred) =>\n      cardFiltred.name\n        .toLowerCase()\n        .includes(this.state.inputValue.toLowerCase())\n    );\n    this.setState({ data: filterMortyCard });\n  }\n// pitamos la tarjeta de detalles, para ello en la rruta que queremos que aparezca declaramos la fucion que pinta los datos, despues con un find, decimos que compare la ruta que hemos puesto (nombre., nickname) con los datos dentro del array inciañ (name)\n  renderCharacterDetail(props) {\n    const dataObj= this.state.data.find ((cardDetail) => cardDetail.name === props.match.params.nickname  )\n    return (\n      <CharacterDetail data= {dataObj} />\n    );\n  }\n\n  render() {\n    // // Pasamos los datos del archivo json a través del estado del componente y luego por props a su componente hijo\n    const MortyData = this.state.data;\n    const inputValue = this.state.imputValue;\n    return (\n      <>\n        <Switch>\n          <Route exact path='/'>\n            <CharacterList\n              dataMortylist={MortyData} // para filtrar tengo que pasarte el estado, donde se guardara el array completo y el filtrado en funcion de si tengo algo en el value o no\n            />\n            <Filters\n              inputValue={inputValue}\n              handleInput={this.handleInput} //props para que filer avise a app del evento\n            />\n          </Route>\n          <Route path='/:nickname' render = {this.renderCharacterDetail}/>\n            {/* <CharacterDetail dataMortylist={MortyData} /> */}\n       \n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}